type UserParticipation = record {participations: vec ClaimedRecord;};
type Time = int;
type Self = 
 service {
   claimICFCPackets: (CalimICFCPackets) -> (Result);
   getAppStatus: () -> (Result_4) query;
   getProgress: () -> (Result_3);
   getUserParticipation: () -> (Result_2);
   getUsersICFCDistributions: () -> (Result_1);
   refreshParticipant: () -> (Result);
 };
type SaleProgress = 
 record {
   remainingPackets: nat;
   totalPackets: nat;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: SaleProgress;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: UserParticipation;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: vec ICFCDistribution;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type PrincipalId = text;
type ICFCDistribution = 
 record {
   amount: nat;
   claimId: nat;
   distributionStatus: DistributionStatus;
   installment: nat;
   principalId: PrincipalId;
   time: Time;
 };
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type DistributionStatus = 
 variant {
   Completed;
   Pending;
 };
type ClaimedRecord = 
 record {
   claimId: int;
   claimedOn: int;
   packetsClaimed: nat;
 };
type CalimICFCPackets = record {packets: nat;};
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
service : () -> Self
