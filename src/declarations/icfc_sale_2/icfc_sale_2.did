type WaterwayLabsApp = 
 variant {
   FootballGod;
   ICF1;
   ICFC;
   ICGC;
   ICPCasino;
   ICPFA;
   JeffBets;
   OpenBook;
   OpenCare;
   OpenChef;
   OpenFPL;
   OpenWSL;
   TransferKings;
   WaterwayLabs;
 };
type UserParticipation = record {participations: vec PurchaseRecord;};
type TopupCanister = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   cycles: nat;
 };
type Time = int;
type Self = 
 service {
   claimICFCPacks: () -> (Result);
   getAppStatus: () -> (Result_5) query;
   getCanisterInfo: () -> (Result_4);
   getProgress: () -> (Result_3);
   getUserParticipation: () -> (Result_2);
   getUsersICFCDistributions: () -> (Result_1);
   transferCycles: (TopupCanister) -> (Result);
 };
type SaleProgress = 
 record {
   packCostinICP: nat;
   remainingPacks: nat;
   totalPacks: nat;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: CanisterInfo;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: SaleProgress;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: UserParticipation;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: vec ICFCDistribution;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type PurchaseRecord = 
 record {
   packsPurchased: nat;
   purchaseId: nat;
   purchasedOn: int;
 };
type PrincipalId = text;
type ICFCDistribution = 
 record {
   amount: nat;
   distributionStatus: DistributionStatus;
   installment: nat;
   principalId: PrincipalId;
   purchaseId: nat;
   time: Time;
 };
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type DistributionStatus = 
 variant {
   Completed;
   Pending;
 };
type CanisterType = 
 variant {
   Dynamic;
   SNS;
   Static;
 };
type CanisterStatus = 
 variant {
   running;
   stopped;
   stopping;
 };
type CanisterInfo = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   canisterName: text;
   canisterStatus: CanisterStatus;
   canisterType: CanisterType;
   computeAllocation: nat;
   controllers: vec PrincipalId;
   cycles: nat;
   freezeThreshold: nat;
   memoryAllocation: nat;
   memoryUsage: nat;
 };
type CanisterId = text;
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
service : () -> Self
