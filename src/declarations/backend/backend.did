type WaterwayLabsApp = 
 variant {
   FootballGod;
   ICF1;
   ICFC;
   ICGC;
   ICPCasino;
   ICPFA;
   JeffBets;
   OpenBeats;
   OpenBook;
   OpenCare;
   OpenChef;
   OpenFPL;
   OpenWSL;
   TransferKings;
   WaterwayLabs;
 };
type VerifySubApp = 
 record {
   icfcPrincipalId: PrincipalId;
   subApp: SubApp;
   subAppUserPrincipalId: PrincipalId;
 };
type UserNeuronsDTO = 
 record {
   totalMaxStaked: nat64;
   userMembershipEligibility: EligibleMembership;
   userNeurons: vec Neuron;
 };
type UpdateUserName = record {username: text;};
type UpdateProfilePicture = record {profilePicture: opt blob;};
type UpdateNationality = record {nationalityId: CountryId;};
type UpdateFavouriteClub = 
 record {
   favouriteClubId: ClubId;
   favouriteLeagueId: LeagueId;
 };
type UpdateDisplayName = record {displayName: text;};
type TopupCanister = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   cycles: nat;
 };
type TokenBalances = 
 record {
   ckBTCBalance: nat;
   icfcBalance: nat;
   icgcBalance: nat;
   icpBalance: nat;
 };
type Subaccount = record {subaccount: blob;};
type SubApp__2 = 
 variant {
   FootballGod;
   JeffBets;
   OpenFPL;
   OpenWSL;
   TransferKings;
 };
type SubApp__1 = 
 variant {
   FootballGod;
   JeffBets;
   OpenFPL;
   OpenWSL;
   TransferKings;
 };
type SubApp = 
 variant {
   FootballGod;
   JeffBets;
   OpenFPL;
   OpenWSL;
   TransferKings;
 };
type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type Self = 
 service {
   addController: (AddController) -> (Result);
   addSubApp: (AddSubApp) -> (Result);
   claimMembership: () -> (Result_12);
   completeICFCPackPurchase: (PrincipalId, nat) -> (Result);
   createProfile: (CreateProfile) -> (Result);
   getAppStatus: () -> (Result_11) query;
   getCanisterIds: () -> (vec CanisterId);
   getClubs: (GetClubs) -> (Result_10);
   getCountries: (GetCountries) -> (Result_9);
   getICFCProfile: (GetICFCProfile) -> (Result_4);
   getICFCProfileSummary: (GetICFCProfile) -> (Result_8);
   getICPBalance: (PrincipalId) -> (Result_7);
   getLeaderboardRequests: (GetLeaderboardRequests) -> (Result_6);
   getLeagues: (GetLeagues) -> (Result_5);
   getProfile: () -> (Result_4);
   getProfileCanisterIds: () -> (vec CanisterId);
   getProfileCanisterIndex: () -> (vec record {
                                         PrincipalId;
                                         CanisterId;
                                       });
   getProjectCanisters: () -> (Result_3);
   getTokenBalances: () -> (Result_2);
   getUserNeurons: () -> (Result_1);
   isUsernameValid: (IsUsernameValid) -> (bool) query;
   payoutLeaderboard: (PayoutLeaderboard) -> (Result);
   removeController: (RemoveController) -> (Result);
   removeNeuronsforExpiredMembership: (PrincipalId) -> ();
   removeSubApp: (SubApp__1) -> (Result);
   requestLeaderboardPayout: (LeaderboardPayoutRequest) -> (Result);
   transferCycles: (TopupCanister) -> (Result);
   updateDisplayName: (UpdateDisplayName) -> (Result);
   updateFavouriteClub: (UpdateFavouriteClub) -> (Result);
   updateNationality: (UpdateNationality) -> (Result);
   updateProfilePicture: (UpdateProfilePicture) -> (Result);
   updateUsername: (UpdateUserName) -> (Result);
   verifySubApp: (VerifySubApp) -> (Result);
 };
type SeasonId = nat16;
type Result_9 = 
 variant {
   err: Error;
   ok: Countries;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: ICFCProfileSummary;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: LeaderboardRequests;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: Leagues;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: ProfileDTO;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: ProjectCanisters;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: TokenBalances;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: MembershipClaim__1;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: Clubs;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: UserNeuronsDTO;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RemoveController = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   controller: PrincipalId;
 };
type ProjectCanisters = record {entries: vec Canister;};
type ProfileDTO = 
 record {
   appPrincipalIds: vec record {
                          SubApp__2;
                          PrincipalId;
                        };
   createdOn: int;
   displayName: text;
   favouriteClubId: opt ClubId;
   favouriteLeagueId: opt LeagueId;
   membershipClaims: vec MembershipClaim;
   membershipExpiryTime: int;
   membershipType: MembershipType__1;
   nationalityId: opt CountryId;
   podcastIds: vec PrincipalId;
   principalId: PrincipalId;
   profilePicture: opt blob;
   termsAgreed: bool;
   username: text;
 };
type PrincipalId = text;
type PayoutStatus = 
 variant {
   Paid;
   Pending;
 };
type PayoutRequest = 
 record {
   app: WaterwayLabsApp;
   gameweek: GameweekNumber;
   leaderboard: vec LeaderboardEntry;
   seasonId: SeasonId;
   token: text;
   totalEntries: nat;
   totalPaid: nat;
 };
type PayoutLeaderboard = 
 record {
   app: WaterwayLabsApp;
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type NeuronPermission = 
 record {
   permission_type: vec int32;
   "principal": opt principal;
 };
type NeuronId = record {id: blob;};
type Neuron = 
 record {
   aging_since_timestamp_seconds: nat64;
   auto_stake_maturity: opt bool;
   cached_neuron_stake_e8s: nat64;
   created_timestamp_seconds: nat64;
   disburse_maturity_in_progress: vec DisburseMaturityInProgress;
   dissolve_state: opt DissolveState;
   followees: vec record {
                    nat64;
                    Followees;
                  };
   id: opt NeuronId;
   maturity_e8s_equivalent: nat64;
   neuron_fees_e8s: nat64;
   permissions: vec NeuronPermission;
   source_nns_neuron_id: opt nat64;
   staked_maturity_e8s_equivalent: opt nat64;
   vesting_period_seconds: opt nat64;
   voting_power_percentage_multiplier: nat64;
 };
type MembershipType__1 = 
 variant {
   Expired;
   Founding;
   Lifetime;
   Monthly;
   NotClaimed;
   NotEligible;
   Seasonal;
 };
type MembershipType = 
 variant {
   Expired;
   Founding;
   Lifetime;
   Monthly;
   NotClaimed;
   NotEligible;
   Seasonal;
 };
type MembershipClaim__1 = 
 record {
   expiresOn: opt int;
   membershipType: MembershipType__1;
   purchasedOn: int;
 };
type MembershipClaim = 
 record {
   expiresOn: opt int;
   membershipType: MembershipType;
   purchasedOn: int;
 };
type Leagues = record {leagues: vec League;};
type LeagueId = nat16;
type League = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   id: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type LeaderboardRequests = 
 record {
   requests: vec PayoutRequest;
   totalRequest: nat;
 };
type LeaderboardPayoutRequest = 
 record {
   app: WaterwayLabsApp;
   gameweek: GameweekNumber;
   leaderboard: vec LeaderboardEntry;
   seasonId: SeasonId;
   token: text;
   totalEntries: nat;
   totalPaid: nat;
 };
type LeaderboardEntry = 
 record {
   appPrincipalId: PrincipalId;
   payoutDate: opt int;
   payoutStatus: PayoutStatus;
   rewardAmount: opt nat64;
 };
type IsUsernameValid = record {username: text;};
type ICFCProfileSummary = 
 record {
   createdOn: int;
   displayName: text;
   favouriteClubId: opt ClubId;
   favouriteLeagueId: opt LeagueId;
   membershipClaims: vec MembershipClaim;
   membershipExpiryTime: int;
   membershipType: MembershipType;
   nationalityId: opt CountryId;
   principalId: PrincipalId;
   profilePicture: opt blob;
   termsAgreed: bool;
   username: text;
 };
type GetLeagues = record {};
type GetLeaderboardRequests = record {};
type GetICFCProfile = record {principalId: PrincipalId;};
type GetCountries = record {};
type GetClubs = record {leagueId: LeagueId;};
type Gender = 
 variant {
   Female;
   Male;
 };
type GameweekNumber = nat8;
type Followees = record {followees: vec NeuronId;};
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type EligibleMembership = 
 record {
   eligibleNeuronIds: vec blob;
   membershipType: MembershipType;
 };
type DissolveState = 
 variant {
   DissolveDelaySeconds: nat64;
   WhenDissolvedTimestampSeconds: nat64;
 };
type DisburseMaturityInProgress = 
 record {
   account_to_disburse_to: opt Account;
   amount_e8s: nat64;
   finalize_disbursement_timestamp_seconds: opt nat64;
   timestamp_of_disbursement_seconds: nat64;
 };
type CreateProfile = 
 record {
   displayName: text;
   favouriteClubId: opt ClubId;
   favouriteLeagueId: opt LeagueId;
   nationalityId: opt CountryId;
   profilePicture: opt blob;
   username: text;
 };
type CountryId = nat16;
type Country = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type Countries = record {countries: vec Country;};
type Clubs = 
 record {
   clubs: vec Club;
   leagueId: LeagueId;
 };
type ClubId = nat16;
type Club = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: ClubId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CanisterType = 
 variant {
   Dynamic;
   SNS;
   Static;
 };
type CanisterId = text;
type Canister = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   canisterName: text;
   canisterType: CanisterType;
 };
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
type AddSubApp = 
 record {
   subApp: SubApp;
   subAppUserPrincipalId: PrincipalId;
 };
type AddController = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   controller: PrincipalId;
 };
type Account = 
 record {
   owner: opt principal;
   subaccount: opt Subaccount;
 };
service : () -> Self
