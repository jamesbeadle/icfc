type Self = 
 service {
   getAppStatus: () -> (Result_2) query;
   getProfile: () -> (Result_1) query;
   getSaleCountdown: () ->
    (record {
       status: text;
       stringTime: text;
       timeRemaining: nat64;
     });
   get_goal: () -> (nat);
   get_goal_progress: () -> (nat);
   get_principal: () -> (principal);
   get_sale_participants: () -> (vec SaleParticipant);
   get_user_balance: () -> (nat);
   get_user_contribution: () -> (vec SaleParticipant);
   participate: (nat) -> (Result);
 };
type SaleParticipant = 
 record {
   amount: nat;
   icfc_staked: nat;
   time: nat64;
   user: principal;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: AppStatusDTO;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Profile = 
 record {
   appPrincipalIds: vec record {
                          text;
                          PrincipalId;
                        };
   createdOn: int;
   displayName: text;
   membershipClaims: vec MembershipClaim;
   membershipType: MembershipType;
   podcastIds: vec PrincipalId;
   principalId: PrincipalId;
   profilePicture: blob;
   profilePictureExtension: text;
   termsAgreed: bool;
   username: text;
 };
type PrincipalId = text;
type MembershipType = 
 variant {
   Annual;
   Lifetime;
   Monthly;
 };
type MembershipClaim = 
 record {
   claimedOn: int;
   expiresOn: opt int;
   membershipType: MembershipType;
 };
type Error = 
 variant {
   AlreadyExists;
   DecodeError;
   InvalidData;
   NotAllowed;
   NotAuthorized;
   NotFound;
 };
type AppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
service : () -> Self
