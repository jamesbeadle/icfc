type UpdateUserName = 
 record {
   principalId: PrincipalId;
   username: text;
 };
type UpdateProfilePicture = 
 record {
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureExtension: text;
 };
type UpdateDisplayName = 
 record {
   displayName: text;
   principalId: PrincipalId;
 };
type Self = 
 service {
   createProfile: (CreateProfile) -> (Result);
   getProfile: () -> (Result_2);
   get_app_status: () -> (Result_1) query;
   updateDisplayName: (UpdateDisplayName) -> (Result);
   updateProfilePicture: (UpdateProfilePicture) -> (Result);
   updateUsername: (UpdateUserName) -> (Result);
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: AppStatusDTO;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureExtension: text;
   username: text;
 };
type PrincipalId = text;
type Error = 
 variant {
   AlreadyExists;
   CanisterFull;
   CreateGameError;
   DecodeError;
   InvalidData;
   InvalidProfilePicture;
   NotAllowed;
   NotAuthorized;
   NotEnoughFunds;
   NotFound;
   OutOfRange;
   PaymentError;
   TooLong;
   TooShort;
 };
type CreateProfile = 
 record {
   displayName: text;
   profilePicture: opt blob;
   profilePictureExtension: opt text;
   username: text;
 };
type AppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
service : () -> Self
